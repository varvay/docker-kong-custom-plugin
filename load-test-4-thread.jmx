<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Kong Load Test" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">/Users/vaya/Documents/Workspace/Maverick/docker-kong/jmeter-lib/javax.activation-api-1.2.0.jar,/Users/vaya/Documents/Workspace/Maverick/docker-kong/jmeter-lib/jaxb-api-2.3.1.jar,/Users/vaya/Documents/Workspace/Maverick/docker-kong/jmeter-lib/hello-world/build/libs/fat-hello-world-1.0-SNAPSHOT.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">400</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">4</stringProp>
        <stringProp name="ThreadGroup.ramp_time">4</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only - Prep Key Exchange" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Key Exchange" enabled="true">
            <stringProp name="scriptLanguage">java</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.util.UUID;
import mav.LoadTest;
import mav.LoadTest.KeyPair;

String deviceId = UUID.randomUUID().toString();

LoadTest lt = new LoadTest();

KeyPair keyPair = lt.keyExchange(
	&quot;http://localhost:8080/key-exchange&quot;,
	deviceId
	);

vars.put(&quot;deviceId&quot;, deviceId);
vars.put(&quot;signServerPublicKey&quot;, keyPair.getHex_sign_s_public_key());
vars.put(&quot;encServerPublicKey&quot;, keyPair.getHex_enc_s_public_key());
vars.put(&quot;signClientPublicKey&quot;, keyPair.getHex_sign_c_public_key());
vars.put(&quot;signClientPrivateKey&quot;, keyPair.getHex_sign_c_private_key());
vars.put(&quot;encClientPublicKey&quot;, keyPair.getHex_enc_c_public_key());
vars.put(&quot;encClientPrivateKey&quot;, keyPair.getHex_enc_c_private_key());
vars.put(&quot;encServerPrivateKey&quot;, keyPair.getHex_enc_s_private_key());</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Sign &amp; Encrypt Payload" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import javax.xml.bind.DatatypeConverter;
import mav.LoadTest;

public class ByteArrayPair {
    private final Object first;
    private final Object second;

    public ByteArrayPair(Object first, Object second) {
        this.first = first;
        this.second = second;
    }

    public Object getFirst() {
        return first;
    }

    public Object getSecond() {
        return second;
    }
}

String request = &quot;{\&quot;age\&quot;:30,\&quot;name\&quot;:\&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse dignissim ut nisi sed finibus. Suspendisse convallis sit amet felis eu dictum. Vivamus condimentum purus ante, eget maximus magna consectetur eu. Vivamus condimentum urna in erat fermentum, sed posuere nisl condimentum. Vestibulum in eros ut urna cursus porta. Pellentesque pretium non velit et dictum. In hac habitasse platea dictumst. Curabitur eget justo non felis dapibus sollicitudin eget ac ligula. Duis imperdiet a nunc at fringilla. Aenean non mauris ipsum. Praesent vel sollicitudin sem, vel posuere elit. Vivamus vel ornare ligula, et aliquam arcu. Cras accumsan urna mi, a condimentum orci aliquam eu. Ut nec dolor mollis, tempor lectus fringilla, iaculis ipsum. In quis vulputate nisi. Vivamus massa massa, semper sit amet dolor ac, dictum pulvinar lorem. Pellentesque eget facilisis massa. Morbi nec ligula facilisis, consequat sapien at, pharetra augue. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Suspendisse potenti. Quisque enim elit, tincidunt vel placerat nec, ullamcorper vitae nisi. Morbi ante ipsum, mattis nec egestas et, volutpat vel odio. Nam eget tempus nisl. Fusce dictum quam a purus venenatis pulvinar. Nulla vitae tincidunt lectus. Ut magna felis, pellentesque et posuere at, aliquam sed dui. Etiam at libero ut diam aliquam suscipit. Nulla sit amet pretium elit. Vivamus et magna vel velit fringilla mattis. Cras eu ullamcorper ante. Nulla nisi leo, dictum auctor condimentum sed, tincidunt id arcu. Pellentesque maximus in felis ut ornare. Phasellus ut sapien dui. Ut tortor lacus, cursus in luctus ut, ultrices quis dolor. Fusce posuere ligula et dui sagittis euismod. Vestibulum ultrices porta dictum. Suspendisse non ipsum non dui tempor congue. Etiam at accumsan est. Ut finibus leo sapien, non efficitur metus efficitur auctor. Fusce euismod nisl ac odio iaculis, vel convallis urna rutrum. Vestibulum ex lorem, aliquam vitae tristique tristique, dictum et risus. Aliquam ut vestibulum urna. Mauris tincidunt tempus massa at vestibulum. Duis placerat, enim a consectetur fringilla, quam felis interdum risus, quis iaculis tellus sapien eu tellus. Etiam placerat mollis ultrices. Maecenas et justo sit amet nulla rutrum posuere. Vivamus a ligula vestibulum, pulvinar ex vel, lobortis eros. Nulla facilisi. Suspendisse sollicitudin ipsum lacus, sed tristique erat ultricies id. Cras vulputate quis turpis sit amet placerat. Duis gravida nec est vitae mattis. Curabitur varius, libero vel accumsan rhoncus, mi est hendrerit metus, et semper mauris est in elit. Fusce ullamcorper augue ut sapien luctus, lobortis hendrerit velit rhoncus. Ut consectetur, ante ac pretium pharetra, magna urna pulvinar leo, at vulputate purus sem vel purus. In nec erat eget turpis efficitur lacinia tempor eget leo. Cras tincidunt in lorem vitae vehicula. Integer laoreet ligula luctus est laoreet scelerisque. Sed felis massa, vehicula aliquet sem quis, tristique condimentum nibh. Quisque at pharetra nibh. Integer sollicitudin lacus magna. Suspendisse ultricies orci vel magna pellentesque vestibulum. Nam interdum leo sit amet risus aliquam, in placerat elit dignissim. Aenean auctor odio in turpis varius molestie. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nulla posuere tempus ultrices. Quisque euismod, magna in auctor fermentum, metus dui varius orci, sit amet ultricies enim magna non quam. Suspendisse venenatis sagittis leo, scelerisque ornare nibh iaculis id. Integer eget mi justo. Quisque non nisi hendrerit, ullamcorper sem in, luctus arcu. Fusce vel commodo lacus, sed bibendum tellus. Etiam a elit volutpat, posuere metus eu, ullamcorper ligula. Pellentesque eleifend, nisi sit amet accumsan malesuada, nisi dui elementum sapien, a blandit dolor magna sagittis mauris. Etiam purus elit, rhoncus id vehicula sed, ultricies et velit. Praesent placerat orci sit amet erat congue lobortis. Cras rutrum euismod feugiat. Ut ac iaculis ex. Quisque ultrices ullamcorper purus molestie lacinia. Sed malesuada facilisis magna eu vestibulum. Nunc porttitor posuere dolor ac dignissim. Morbi rhoncus, neque eu mollis malesuada, sapien metus placerat lectus, sit amet tempor nisi mi et elit. Vestibulum id facilisis felis. Ut porta sit amet erat a maximus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Phasellus elementum sem a velit luctus pharetra. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer sit amet libero lectus. Praesent nulla mi, lobortis quis tincidunt sed, lobortis et nibh. Fusce leo neque, euismod eget vehicula in, accumsan a ex. Nunc vitae risus at odio bibendum tincidunt sed quis nulla. Aenean porta commodo tortor, sit amet mattis metus convallis nec. Etiam finibus sapien ut erat interdum, vitae rhoncus diam lacinia. Cras vel enim sed magna dapibus tempor et eget nibh. Sed sed.\&quot;}&quot;;

LoadTest lt = new LoadTest();

byte[] signature = lt.signMessage(
	DatatypeConverter.parseHexBinary(vars.get(&quot;signClientPrivateKey&quot;)),
	request.getBytes()
	);

ByteArrayPair pair = lt.encrypt(
	DatatypeConverter.parseHexBinary(vars.get(&quot;encClientPrivateKey&quot;)),
	DatatypeConverter.parseHexBinary(vars.get(&quot;encServerPublicKey&quot;)),
	signature
	);

vars.put(&quot;reqNonce&quot;, DatatypeConverter.printHexBinary(pair.getFirst()));
vars.put(&quot;reqCiphertext&quot;, DatatypeConverter.printHexBinary(pair.getSecond()));

</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Transaction Encrypted" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;nonce&quot;: &quot;${reqNonce}&quot;,&#xd;
	&quot;ciphertext&quot;: &quot;${reqCiphertext}&quot;	&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/wiremock/api/github/users/octocat</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Device-ID</stringProp>
                <stringProp name="Header.value">${deviceId}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Downstream-Enc</stringProp>
                <stringProp name="Header.value">true</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Upstream-Enc</stringProp>
                <stringProp name="Header.value">true</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">respNonce</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..nonce</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">respCiphertext</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..ciphertext</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - Decrypt &amp; Verify Payload" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import javax.xml.bind.DatatypeConverter;
import mav.LoadTest;

String nonce = vars.get(&quot;respNonce&quot;);
String ciphertext = vars.get(&quot;respCiphertext&quot;);

LoadTest lt = new LoadTest();

byte[] signature = lt.decrypt(
	DatatypeConverter.parseHexBinary(vars.get(&quot;encClientPrivateKey&quot;)),
	DatatypeConverter.parseHexBinary(vars.get(&quot;encServerPublicKey&quot;)),
	DatatypeConverter.parseHexBinary(vars.get(&quot;respNonce&quot;)),
	DatatypeConverter.parseHexBinary(vars.get(&quot;respCiphertext&quot;))
	);

byte[] response = lt.verifySignature(
	DatatypeConverter.parseHexBinary(vars.get(&quot;signServerPublicKey&quot;)),
	signature
	);

return new String(response);</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Transaction Plain" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;age&quot;: 30,&#xd;
    &quot;name&quot;: &quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse dignissim ut nisi sed finibus. Suspendisse convallis sit amet felis eu dictum. Vivamus condimentum purus ante, eget maximus magna consectetur eu. Vivamus condimentum urna in erat fermentum, sed posuere nisl condimentum. Vestibulum in eros ut urna cursus porta. Pellentesque pretium non velit et dictum. In hac habitasse platea dictumst. Curabitur eget justo non felis dapibus sollicitudin eget ac ligula. Duis imperdiet a nunc at fringilla. Aenean non mauris ipsum. Praesent vel sollicitudin sem, vel posuere elit. Vivamus vel ornare ligula, et aliquam arcu. Cras accumsan urna mi, a condimentum orci aliquam eu. Ut nec dolor mollis, tempor lectus fringilla, iaculis ipsum. In quis vulputate nisi. Vivamus massa massa, semper sit amet dolor ac, dictum pulvinar lorem. Pellentesque eget facilisis massa. Morbi nec ligula facilisis, consequat sapien at, pharetra augue. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Suspendisse potenti. Quisque enim elit, tincidunt vel placerat nec, ullamcorper vitae nisi. Morbi ante ipsum, mattis nec egestas et, volutpat vel odio. Nam eget tempus nisl. Fusce dictum quam a purus venenatis pulvinar. Nulla vitae tincidunt lectus. Ut magna felis, pellentesque et posuere at, aliquam sed dui. Etiam at libero ut diam aliquam suscipit. Nulla sit amet pretium elit. Vivamus et magna vel velit fringilla mattis. Cras eu ullamcorper ante. Nulla nisi leo, dictum auctor condimentum sed, tincidunt id arcu. Pellentesque maximus in felis ut ornare. Phasellus ut sapien dui. Ut tortor lacus, cursus in luctus ut, ultrices quis dolor. Fusce posuere ligula et dui sagittis euismod. Vestibulum ultrices porta dictum. Suspendisse non ipsum non dui tempor congue. Etiam at accumsan est. Ut finibus leo sapien, non efficitur metus efficitur auctor. Fusce euismod nisl ac odio iaculis, vel convallis urna rutrum. Vestibulum ex lorem, aliquam vitae tristique tristique, dictum et risus. Aliquam ut vestibulum urna. Mauris tincidunt tempus massa at vestibulum. Duis placerat, enim a consectetur fringilla, quam felis interdum risus, quis iaculis tellus sapien eu tellus. Etiam placerat mollis ultrices. Maecenas et justo sit amet nulla rutrum posuere. Vivamus a ligula vestibulum, pulvinar ex vel, lobortis eros. Nulla facilisi. Suspendisse sollicitudin ipsum lacus, sed tristique erat ultricies id. Cras vulputate quis turpis sit amet placerat. Duis gravida nec est vitae mattis. Curabitur varius, libero vel accumsan rhoncus, mi est hendrerit metus, et semper mauris est in elit. Fusce ullamcorper augue ut sapien luctus, lobortis hendrerit velit rhoncus. Ut consectetur, ante ac pretium pharetra, magna urna pulvinar leo, at vulputate purus sem vel purus. In nec erat eget turpis efficitur lacinia tempor eget leo. Cras tincidunt in lorem vitae vehicula. Integer laoreet ligula luctus est laoreet scelerisque. Sed felis massa, vehicula aliquet sem quis, tristique condimentum nibh. Quisque at pharetra nibh. Integer sollicitudin lacus magna. Suspendisse ultricies orci vel magna pellentesque vestibulum. Nam interdum leo sit amet risus aliquam, in placerat elit dignissim. Aenean auctor odio in turpis varius molestie. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nulla posuere tempus ultrices. Quisque euismod, magna in auctor fermentum, metus dui varius orci, sit amet ultricies enim magna non quam. Suspendisse venenatis sagittis leo, scelerisque ornare nibh iaculis id. Integer eget mi justo. Quisque non nisi hendrerit, ullamcorper sem in, luctus arcu. Fusce vel commodo lacus, sed bibendum tellus. Etiam a elit volutpat, posuere metus eu, ullamcorper ligula. Pellentesque eleifend, nisi sit amet accumsan malesuada, nisi dui elementum sapien, a blandit dolor magna sagittis mauris. Etiam purus elit, rhoncus id vehicula sed, ultricies et velit. Praesent placerat orci sit amet erat congue lobortis. Cras rutrum euismod feugiat. Ut ac iaculis ex. Quisque ultrices ullamcorper purus molestie lacinia. Sed malesuada facilisis magna eu vestibulum. Nunc porttitor posuere dolor ac dignissim. Morbi rhoncus, neque eu mollis malesuada, sapien metus placerat lectus, sit amet tempor nisi mi et elit. Vestibulum id facilisis felis. Ut porta sit amet erat a maximus. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Phasellus elementum sem a velit luctus pharetra. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer sit amet libero lectus. Praesent nulla mi, lobortis quis tincidunt sed, lobortis et nibh. Fusce leo neque, euismod eget vehicula in, accumsan a ex. Nunc vitae risus at odio bibendum tincidunt sed quis nulla. Aenean porta commodo tortor, sit amet mattis metus convallis nec. Etiam finibus sapien ut erat interdum, vitae rhoncus diam lacinia. Cras vel enim sed magna dapibus tempor et eget nibh. Sed sed.&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/wiremock/api/github/users/octocat</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Device-ID</stringProp>
                <stringProp name="Header.value">${deviceId}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Downstream-Enc</stringProp>
                <stringProp name="Header.value">false</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Upstream-Enc</stringProp>
                <stringProp name="Header.value">false</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
